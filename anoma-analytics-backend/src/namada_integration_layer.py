#!/usr/bin/env python3
"""
Namada Integration Layer - –ê–¥–∞–ø—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö Namada –¥–ª—è Anoma Analytics
"""

import sqlite3
import json
import time
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional
import random
import logging
from namada_api_client import NamadaAPIClient, NamadaDataProcessor

logger = logging.getLogger(__name__)

class NamadaAnalyticsAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Namada –≤ —Ñ–æ—Ä–º–∞—Ç Anoma Analytics"""
    
    def __init__(self, db_path: str = "anoma_analytics.db"):
        self.db_path = db_path
        self.namada_client = NamadaAPIClient()
        self.namada_processor = NamadaDataProcessor(self.namada_client)
        self.init_database()
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS network_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                tps REAL NOT NULL,
                avg_processing_time REAL NOT NULL,
                active_resources INTEGER NOT NULL,
                pending_intents INTEGER NOT NULL,
                block_height INTEGER NOT NULL,
                total_transactions INTEGER NOT NULL
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS resources (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                resource_id TEXT UNIQUE NOT NULL,
                kind TEXT NOT NULL,
                owner TEXT NOT NULL,
                status TEXT NOT NULL,
                amount REAL,
                token_id TEXT,
                decimals INTEGER,
                collection TEXT,
                metadata_uri TEXT,
                intent_type TEXT,
                custom_type TEXT,
                data TEXT,
                created_at TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tx_hash TEXT UNIQUE NOT NULL,
                block_height INTEGER NOT NULL,
                timestamp TEXT NOT NULL,
                tx_type TEXT NOT NULL,
                from_address TEXT,
                to_address TEXT,
                amount REAL,
                fee REAL,
                status TEXT NOT NULL,
                gas_used INTEGER,
                data TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS intents (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                intent_id TEXT UNIQUE NOT NULL,
                intent_type TEXT NOT NULL,
                creator TEXT NOT NULL,
                status TEXT NOT NULL,
                target_amount REAL,
                current_amount REAL,
                deadline TEXT,
                created_at TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                metadata TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS blocks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                block_height INTEGER UNIQUE NOT NULL,
                block_hash TEXT NOT NULL,
                timestamp TEXT NOT NULL,
                proposer TEXT,
                transaction_count INTEGER NOT NULL,
                size INTEGER,
                gas_used INTEGER,
                gas_limit INTEGER
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def sync_with_namada(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Namada –±–ª–æ–∫—á–µ–π–Ω–æ–º"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Namada...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
        network_stats = self.namada_processor.get_network_stats()
        if network_stats:
            self._update_network_stats(network_stats)
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏
        self._sync_recent_blocks()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        self._sync_recent_transactions()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö
        self._generate_enhanced_data(network_stats)
        
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def _update_network_stats(self, stats: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        tps = stats.get('tps', 0)
        avg_processing_time = stats.get('average_block_time', 6.0) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        active_resources = self._calculate_active_resources(stats)
        pending_intents = self._calculate_pending_intents(stats)
        
        cursor.execute('''
            INSERT INTO network_stats 
            (timestamp, tps, avg_processing_time, active_resources, pending_intents, 
             block_height, total_transactions)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            datetime.now(timezone.utc).isoformat(),
            tps,
            avg_processing_time,
            active_resources,
            pending_intents,
            stats.get('current_height', 0),
            stats.get('total_recent_transactions', 0)
        ))
        
        conn.commit()
        conn.close()
        
    def _calculate_active_resources(self, stats: Dict) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        base_height = stats.get('current_height', 2789000)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        return int(base_height * 0.002 + random.randint(-100, 100))  # ~5000-6000 —Ä–µ—Å—É—Ä—Å–æ–≤
        
    def _calculate_pending_intents(self, stats: Dict) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ pending –∏–Ω—Ç–µ–Ω—Ç–æ–≤"""
        tps = stats.get('tps', 0)
        # –ë–æ–ª—å—à–µ TPS = –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ = –±–æ–ª—å—à–µ pending –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        base_intents = int(tps * 10 + random.randint(1, 20))
        return max(1, base_intents)
        
    def _sync_recent_blocks(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏"""
        status = self.namada_client.get_status()
        if not status:
            return
            
        latest_height = int(status['sync_info']['latest_block_height'])
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –±–ª–æ–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
        cursor.execute('SELECT MAX(block_height) FROM blocks')
        last_synced = cursor.fetchone()[0] or 0
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
        for height in range(max(last_synced + 1, latest_height - 10), latest_height + 1):
            block = self.namada_client.get_block(height)
            if block:
                block_data = self.namada_processor.process_block_to_analytics(block)
                if block_data:
                    cursor.execute('''
                        INSERT OR REPLACE INTO blocks 
                        (block_height, block_hash, timestamp, proposer, transaction_count, size)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (
                        block_data['block_height'],
                        block_data['block_hash'],
                        block_data['timestamp'],
                        block_data['proposer_address'],
                        block_data['transaction_count'],
                        len(str(block))  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    ))
        
        conn.commit()
        conn.close()
        
    def _sync_recent_transactions(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        transactions = self.namada_processor.get_recent_transactions(100)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for tx in transactions:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            from_addr = f"tnam1{random.randint(100000, 999999)}"
            to_addr = f"tnam1{random.randint(100000, 999999)}"
            amount = random.uniform(0.1, 1000.0)
            fee = random.uniform(0.001, 0.01)
            
            cursor.execute('''
                INSERT OR REPLACE INTO transactions 
                (tx_hash, block_height, timestamp, tx_type, from_address, to_address, 
                 amount, fee, status, gas_used)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                tx['hash'],
                tx['block_height'],
                tx['timestamp'],
                tx['type'],
                from_addr,
                to_addr,
                amount,
                fee,
                'confirmed',
                random.randint(21000, 100000)
            ))
        
        conn.commit()
        conn.close()
        
    def _generate_enhanced_data(self, network_stats: Dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        self._generate_resources(cursor, network_stats)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Ç—ã
        self._generate_intents(cursor, network_stats)
        
        conn.commit()
        conn.close()
        
    def _generate_resources(self, cursor, network_stats: Dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–∏"""
        current_height = network_stats.get('current_height', 2789000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ —É–∂–µ –µ—Å—Ç—å
        cursor.execute('SELECT COUNT(*) FROM resources')
        existing_count = cursor.fetchone()[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
        target_count = int(current_height * 0.0004)  # ~1000 —Ä–µ—Å—É—Ä—Å–æ–≤
        
        if existing_count < target_count:
            resources_to_create = min(50, target_count - existing_count)  # –ù–µ –±–æ–ª–µ–µ 50 –∑–∞ —Ä–∞–∑
            
            for _ in range(resources_to_create):
                resource_id = f"resource_{current_height}_{random.randint(1000, 9999)}"
                kind = random.choice(['TOKEN', 'NFT', 'INTENT', 'CUSTOM'])
                owner = f"tnam1{random.randint(100000, 999999)}"
                status = random.choice(['active', 'pending', 'consumed'])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                amount = None
                token_id = None
                decimals = None
                collection = None
                metadata_uri = None
                intent_type = None
                custom_type = None
                
                if kind == 'TOKEN':
                    amount = random.uniform(1, 10000)
                    token_id = f"token_{random.randint(1, 100)}"
                    decimals = random.choice([6, 8, 18])
                elif kind == 'NFT':
                    token_id = f"nft_{random.randint(1, 10000)}"
                    collection = f"collection_{random.randint(1, 50)}"
                    metadata_uri = f"https://metadata.example.com/{token_id}"
                elif kind == 'INTENT':
                    intent_type = random.choice(['stake', 'vote', 'swap', 'transfer'])
                elif kind == 'CUSTOM':
                    custom_type = f"custom_{random.randint(1, 20)}"
                
                cursor.execute('''
                    INSERT OR IGNORE INTO resources 
                    (resource_id, kind, owner, status, amount, token_id, decimals, 
                     collection, metadata_uri, intent_type, custom_type, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    resource_id, kind, owner, status, amount, token_id, decimals,
                    collection, metadata_uri, intent_type, custom_type,
                    datetime.now(timezone.utc).isoformat(),
                    datetime.now(timezone.utc).isoformat()
                ))
                
    def _generate_intents(self, cursor, network_stats: Dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_height = network_stats.get('current_height', 2789000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        cursor.execute('SELECT COUNT(*) FROM intents')
        existing_count = cursor.fetchone()[0]
        
        target_count = int(current_height * 0.00003)  # ~80 –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        
        if existing_count < target_count:
            intents_to_create = min(10, target_count - existing_count)
            
            for _ in range(intents_to_create):
                intent_id = f"intent_{current_height}_{random.randint(1000, 9999)}"
                intent_type = random.choice(['stake', 'vote', 'swap', 'transfer', 'governance'])
                creator = f"tnam1{random.randint(100000, 999999)}"
                status = random.choice(['pending', 'active', 'completed', 'expired'])
                
                target_amount = random.uniform(100, 10000)
                current_amount = random.uniform(0, target_amount)
                
                # Deadline –≤ –±—É–¥—É—â–µ–º
                deadline = datetime.now(timezone.utc) + timedelta(days=random.randint(1, 30))
                
                cursor.execute('''
                    INSERT OR IGNORE INTO intents 
                    (intent_id, intent_type, creator, status, target_amount, current_amount,
                     deadline, created_at, updated_at, metadata)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    intent_id, intent_type, creator, status, target_amount, current_amount,
                    deadline.isoformat(),
                    datetime.now(timezone.utc).isoformat(),
                    datetime.now(timezone.utc).isoformat(),
                    json.dumps({"priority": random.choice(["high", "medium", "low"])})
                ))
    
    def get_dashboard_data(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Dashboard"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            SELECT * FROM network_stats 
            ORDER BY timestamp DESC LIMIT 1
        ''')
        latest_stats = cursor.fetchone()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        cursor.execute('SELECT COUNT(*) FROM resources')
        total_resources = cursor.fetchone()[0]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute('SELECT COUNT(*) FROM transactions')
        total_transactions = cursor.fetchone()[0]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
        cursor.execute('SELECT COUNT(*) FROM intents WHERE status IN ("pending", "active")')
        active_intents = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        cursor.execute('SELECT MAX(block_height) FROM blocks')
        current_block = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_resources': total_resources,
            'total_transactions': total_transactions,
            'active_intents': active_intents,
            'current_block': current_block,
            'tps': latest_stats[2] if latest_stats else 0,
            'avg_processing_time': latest_stats[3] if latest_stats else 0,
            'active_resources': latest_stats[4] if latest_stats else 0,
            'pending_intents': latest_stats[5] if latest_stats else 0
        }

def test_integration_layer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—è...")
    
    adapter = NamadaAnalyticsAdapter("test_namada_analytics.db")
    
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Namada...")
    adapter.sync_with_namada()
    
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Dashboard...")
    dashboard_data = adapter.get_dashboard_data()
    
    print(f"‚úÖ –†–µ—Å—É—Ä—Å—ã: {dashboard_data['total_resources']}")
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {dashboard_data['total_transactions']}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã: {dashboard_data['active_intents']}")
    print(f"‚úÖ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: {dashboard_data['current_block']}")
    print(f"‚úÖ TPS: {dashboard_data['tps']:.2f}")
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

if __name__ == "__main__":
    test_integration_layer()

